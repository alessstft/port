public interface IPaymentProcessor
{
    bool ProcessPayment(decimal amount);
    bool RefundPayment(string transactionId);
}

public interface IPaymentValidator
{
    bool ValidatePayment(decimal amount);
}

public class PayPalProcessor : IPaymentProcessor
{
    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Обработка PayPal платежа на сумму {amount}");
        return true; 
    }

    public bool RefundPayment(string transactionId)
    {
        Console.WriteLine($"Возврат PayPal платежа по транзакции {transactionId}");
        return true;
    }
}

public class CreditCardProcessor : IPaymentProcessor, IPaymentValidator
{
    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Обработка платежа по кредитной карте на сумму {amount}");
        return true;
    }

    public bool RefundPayment(string transactionId)
    {
        Console.WriteLine($"Возврат платежа по кредитной карте по транзакции {transactionId}");
        return true;
    }

    public bool ValidatePayment(decimal amount)
    {
        Console.WriteLine($"Валидация платежа по кредитной карте на сумму {amount}");
        return amount > 0 && amount <= 10000; 
    }
}

public class CryptoCurrencyProcessor : IPaymentProcessor
{
    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Обработка криптовалютного платежа на сумму {amount} BTC");
        return true;
    }

    public bool RefundPayment(string transactionId)
    {
        Console.WriteLine($"Возврат криптовалютного платежа по транзакции {transactionId}");
        return true;
    }
}
public class PaymentService
{
    public bool ProcessPayment(IPaymentProcessor processor, decimal amount)
    {
        if (processor is IPaymentValidator validator)
        {
            if (!validator.ValidatePayment(amount))
            {
                Console.WriteLine("Платеж не прошел валидацию");
                return false;
            }
        }

        return processor.ProcessPayment(amount);
    }

    public bool RefundPayment(IPaymentProcessor processor, string transactionId)
    {
        return processor.RefundPayment(transactionId);
    }
}
class Program
{
    static void Main(string[] args)
    {
        var paymentService = new PaymentService();

        var payPalProcessor = new PayPalProcessor();
        paymentService.ProcessPayment(payPalProcessor, 100.50m);


        var creditCardProcessor = new CreditCardProcessor();
        paymentService.ProcessPayment(creditCardProcessor, 200.75m);

        paymentService.ProcessPayment(creditCardProcessor, -50.00m);

        var cryptoProcessor = new CryptoCurrencyProcessor();
        paymentService.ProcessPayment(cryptoProcessor, 0.005m);
    }
}
